<<<<<<< Updated upstream
model.family = binomial(link = "probit"),
model.optimizer = "bobyqa",
n.iter = 1000000,
verbose = verbose)
# Fit optimal model for post-stratification w/o EBMA
best_subset_opt_poststrat_only <- best_subset_classifier(
model = best.subset.opt,
data.train = no_ebma_data,
model.family = binomial(link = "probit"),
model.optimizer = "bobyqa",
n.iter = 1000000,
verbose = verbose)
# post-stratification
bs_preds <- census %>%
dplyr::mutate(best_subset = stats::predict(object = best_subset_opt_poststrat_only,
newdata = census, allow.new.levels = TRUE,
type = "response")) %>%
dplyr::group_by(.dots = list(L2_unit)) %>%
dplyr::summarize(best_subset = weighted.mean(x = best_subset, w = .data$prop), .groups = "keep")
# individual level predictions for EBMA
bs_ind <- stats::predict(object = best_subset_opt_ebma, type = "response")
# model for EBMA
models$best_subset <- best_subset_opt_ebma
}
# Determine context-level covariates
if (is.null(lasso.L2.x)) {
lasso.L2.x <- L2.x
}
# Context-level fixed effects
L2_fe <- paste(lasso.L2.x, collapse = " + ")
L2_fe_form <- as.formula(paste(y, " ~ ", L2_fe, sep = ""))
# Individual-level random effects as named list
L1_re <- setNames(as.list(rep(c(~ 1), times = length(c(L1.x, L2.unit, L2.reg)))),
c(L1.x, L2.unit, L2.reg))
# Fit optimal model for EBMA
lasso_opt_ebma <- lasso_classifier(
L2.fix = L2_fe_form,
L1.re = L1_re,
data.train = data,
lambda = lasso.opt,
model.family = binomial(link = "probit"),
verbose = verbose)
# Fit optimal model for post-stratification w/o EBMA
lasso_opt_poststrat_only <- lasso_classifier(
L2.fix = L2_fe_form,
L1.re = L1_re,
data.train = no_ebma_data,
lambda = lasso.opt,
model.family = binomial(link = "probit"),
verbose = verbose)
# predictions for post-stratification only (no EBMA)
lasso_ests <- predict_glmmLasso(
m = lasso_opt_poststrat_only,
lasso.L2.x = lasso.L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L1.x = L1.x,
census = census)
lasso_ests
class(lasso_ests)
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
test <- mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
library(autoMrP)
devtools::load_all()
test <- mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = autoMrP::taxes_survey,
census = autoMrP::taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
rm(list=ls())
# arguments
seed <- NULL
y = "YES"
=======
>>>>>>> Stashed changes
L1.x = c("L1x1", "L1x2", "L1x3")
L2.x = c("")
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6")
<<<<<<< Updated upstream
mrp.L2.x = NULL
=======
#L2.x = c("L2.x1", "L2.x2", "L2.x3")
#mrp.L2.x = c("L2.x1", "L2.x2")
>>>>>>> Stashed changes
L2.unit = "state"
L2.reg = "region"
L2.x.scale = FALSE
pcs = NULL
folds = NULL
bin.proportion = "proportion"
bin.size = NULL
<<<<<<< Updated upstream
survey = autoMrP::survey_item
census = autoMrP::census
ebma.size = 1/3
k.folds = 5
cv.sampling = "L2 units"
loss.unit = c("individuals", "L2 units")
loss.fun = c("MSE", "f1", "cross-entropy", "msfe")
=======
survey = survey
census = census
ebma.size = 1/3
k.folds = 5
cv.sampling = "L2 units"
loss.unit = "individuals"
loss.fun = "MSE"
>>>>>>> Stashed changes
# switch for classifiers
best.subset = FALSE
lasso = TRUE
pca = FALSE
gb = FALSE
svm = FALSE
# the standard MRP model
mrp = FALSE
forward.select = FALSE
best.subset.L2.x = NULL
lasso.L2.x = NULL
pca.L2.x = NULL
gb.L2.x = NULL
svm.L2.x = NULL
# Standard MrP model L2 variables
gb.L2.unit = FALSE
gb.L2.reg = TRUE
# tuning params lasso
<<<<<<< Updated upstream
#lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda = NULL #1/exp(-seq(from = -1, to = 4.5, length = 100))
lasso.n.iter = 100
=======
lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda <- 1 / exp(- seq(from = -1, to = 4.5, length = 100))
lasso.n.iter = 70
>>>>>>> Stashed changes
# tuning params boosting
gb.interaction.depth = c(1, 2, 3)
gb.shrinkage = c(0.04, 0.01, 0.008, 0.005, 0.001)
gb.n.trees.init = 1
gb.n.trees.increase = 50
gb.n.trees.max = 1000
gb.n.iter = 70
gb.n.minobsinnode = 5
svm.kernel = c("radial", "polynomial")
svm.loss.fun = NULL
<<<<<<< Updated upstream
svm.cost = NULL #  .1 #c(1, 2, 5, 10)
svm.gamma = NULL
svm.degree = NULL
ebma.n.draws = 1
ebma.tol = c(0.01, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001)
uncertainty = FALSE
boot.iter <- NULL
seed = 2
verbose = FALSE
cores = 6
svm.L2.reg = TRUE
svm.L2.unit = TRUE
oversampling <- FALSE
ranef.test = TRUE
devtools::load_all()
test <- mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = autoMrP::taxes_survey,
census = autoMrP::taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
test
summary.autoMrP(test)
log_spaced(min = .1, max = 100, n = 100)
library(autoMrP)
devtools::build()
# arguments
seed <- NULL
y = "YES"
L1.x = c("L1x1", "L1x2", "L1x3")
L2.x = c("")
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6")
mrp.L2.x = NULL
L2.unit = "state"
L2.reg = "region"
L2.x.scale = TRUE
pcs = NULL
folds = NULL
bin.proportion = "proportion"
bin.size = NULL
survey = autoMrP::survey_item
census = autoMrP::census
ebma.size = 1/3
k.folds = 5
cv.sampling = "L2 units"
loss.unit = c("individuals", "L2 units")
loss.fun = c("MSE", "f1", "cross-entropy", "msfe")
# switch for classifiers
best.subset = TRUE
lasso = TRUE
pca = TRUE
gb = TRUE
svm = TRUE
# the standard MRP model
mrp = TRUE
forward.select = FALSE
best.subset.L2.x = NULL
lasso.L2.x = NULL
pca.L2.x = NULL
gb.L2.x = NULL
svm.L2.x = NULL
# Standard MrP model L2 variables
gb.L2.unit = FALSE
gb.L2.reg = TRUE
# tuning params lasso
#lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda = NULL #1/exp(-seq(from = -1, to = 4.5, length = 100))
lasso.n.iter = 100
# tuning params boosting
gb.interaction.depth = c(1, 2, 3)
gb.shrinkage = c(0.04, 0.01, 0.008, 0.005, 0.001)
gb.n.trees.init = 50
gb.n.trees.increase = 50
gb.n.trees.max = 1000
#gb.n.iter = 70
gb.n.minobsinnode = 5
svm.kernel = c("radial", "polynomial")
svm.loss.fun = NULL
svm.cost = NULL #  .1 #c(1, 2, 5, 10)
svm.gamma = NULL
svm.degree = NULL
ebma.n.draws = 1
=======
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4)
svm.cost = c(1, 10)
ebma.n.draws = 5
>>>>>>> Stashed changes
ebma.tol = c(0.01, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001)
uncertainty = FALSE
seed = NULL
verbose = TRUE
cores = 6
svm.L2.reg = TRUE
<<<<<<< Updated upstream
svm.L2.unit = TRUE
oversampling <- FALSE
ranef.test = TRUE
devtools::load_all()
survey <- autoMrP::taxes_survey
census <- autoMrP::taxes_census
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
library(autoMrP)
library(autoMrP)
devtools::check_win_devel(pkg = ".")
library(autoMrP)
devtools::check_win_devel(pkg = ".")
# toy example
taxes_survey
test <- taxes_survey %>%
dplyr::filter(dplyr::slice_sample(prop = 0.5))
`%>%` <- magrittr::`%>%`
test <- taxes_survey %>%
dplyr::filter(dplyr::slice_sample(prop = 0.5))
`%>%` <- magrittr::`%>%`
test <- taxes_survey %>%
dplyr::slice(dplyr::slice_sample(prop = 0.5))
dplyr::slice(dplyr::slice_sample(n = 100)
test <- taxes_survey %>%
test <- taxes_survey %>%
taxes_survey %>%
dplyr::slice(dplyr::slice_sample(n = 100)
test <- taxes_survey %>%
dplyr::slice(dplyr::slice_sample(n = 100))
test <- taxes_survey %>%
dplyr::slice_sample(prop = 0.5)
test
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
test <- taxes_survey %>%
dplyr::slice_sample(prop = 0.2)
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
test
`%>%` <- magrittr::`%>%`
test <- taxes_survey %>%
dplyr::slice_sample(prop = 0.2)
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
# Minimal example without machine learning
start <- Sys.time()
mrp_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
end <- Sys.time()
difftime(time1 = end, time2 = start, units = "secs")
# Minimal example without machine learning
m_out <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
# Minimal example without machine learning
m <- auto_MrP(
y = "YES",
L1.x = c("L1x1"),
L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
bin.proportion = "proportion",
survey = taxes_survey,
census = taxes_census,
ebma.size = 0,
cores = max_cores,
best.subset = FALSE,
lasso = FALSE,
pca = FALSE,
gb = FALSE,
svm = FALSE,
mrp = TRUE
)
difftime(time1 = end, time2 = start, units = "secs")
summary(m)
plot(m)
library(autoMrP)
devtools::check_win_devel(".")
devtools::build(".")
=======
svm.L2.unit = FALSE
# data
survey <- autoMrP::survey_item
# Call to function doing the error checks
error_checks(y = y,
L1.x = L1.x,
L2.x = L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L2.x.scale = L2.x.scale,
pcs = pcs,
folds = folds,
bin.proportion = bin.proportion,
bin.size = bin.size,
survey = survey,
census = census,
ebma.size = ebma.size,
k.folds = k.folds,
cv.sampling = cv.sampling,
loss.unit = loss.unit,
loss.fun = loss.fun,
best.subset = best.subset,
lasso = lasso,
pca = pca,
gb = gb,
svm = svm,
mrp = mrp,
forward.select = forward.select,
best.subset.L2.x = best.subset.L2.x,
lasso.L2.x = lasso.L2.x,
gb.L2.x = gb.L2.x,
svm.L2.x = svm.L2.x,
mrp.L2.x = mrp.L2.x,
gb.L2.unit = gb.L2.unit,
gb.L2.reg = gb.L2.reg,
lasso.lambda = lasso.lambda,
lasso.n.iter = lasso.n.iter,
uncertainty = uncertainty,
boot.iter = boot.iter)
# Coerce individual-level variables and geographic variables to factors in
# survey and census data
survey <- survey %>%
dplyr::mutate_at(.vars = c(L1.x, L2.unit, L2.reg), .funs = as.factor)
census <- census %>%
dplyr::mutate_at(.vars = c(L1.x, L2.unit, L2.reg), .funs = as.factor)
# If not provided in census data, calculate bin size and bin proportion for
# each ideal type in a geographic unit
if (is.null(bin.proportion)) {
if (is.null(bin.size)) {
census <- census %>%
dplyr::group_by(.dots = c(L1.x, L2.unit)) %>%
dplyr::summarise(n = dplyr::n())
} else {
census$n <- census[[bin.size]]
}
census <- census %>%
dplyr::group_by(.dots = L2.unit) %>%
dplyr::mutate(prop = n / sum(n))
} else {
census <- census %>%
dplyr::rename(prop = one_of(bin.proportion))
}
# If not provided in survey and census data, compute the principal components
# of context-level variables
if (is.null(pcs) & !is.null(L2.x)) {
# Determine context-level covariates whose principal components are to be
# computed
if (is.null(pca.L2.x)) {
pca.L2.x <- L2.x
}
# Compute principal components for survey data
pca_out <- stats::prcomp(survey[, pca.L2.x],
retx = TRUE,
center = TRUE,
scale. = TRUE,
tol = NULL)
# Add PCs to survey data
survey <- survey %>%
dplyr::bind_cols(as.data.frame(pca_out$x))
# Add PCs to census data
pc_names <- colnames(pca_out$x)
census <- census %>%
dplyr::left_join(unique(survey %>% dplyr::select(all_of(L2.unit),
all_of(pc_names))),
by = L2.unit)
} else {
pc_names <- pcs
}
# Scale context-level variables in survey and census data
if (isTRUE(L2.x.scale)) {
survey[, L2.x] <- scale(survey[, L2.x], center = TRUE, scale = TRUE)
census[, L2.x] <- scale(census[, L2.x], center = TRUE, scale = TRUE)
}
# Convert survey and census data to tibble
survey <- tibble::as_tibble(x = survey)
census <- tibble::as_tibble(x = census)
# Random over-sampling
if ( isTRUE(oversampling) ){
add_rows <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
if (y_1 > 0 & y_0 > 0){
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
}
return(os)
})) %>%
tidyr::unnest(os) %>%
dplyr::ungroup()
survey <- dplyr::bind_rows(survey, add_rows)
}
if (is.null(folds)) {
# EBMA hold-out fold
ebma.size <- round(nrow(survey) * ebma.size, digits = 0)
if(ebma.size>0){
ebma_folding_out <- ebma_folding(data = survey,
L2.unit = L2.unit,
ebma.size = ebma.size)
ebma_fold <- ebma_folding_out$ebma_fold
cv_data <- ebma_folding_out$cv_data
} else{
ebma_fold <- NULL
cv_data <- survey
}
# K folds for cross-validation
cv_folds <- cv_folding(data = cv_data,
L2.unit = L2.unit,
k.folds = k.folds,
cv.sampling = cv.sampling)
} else {
if (ebma.size > 0){
# EBMA hold-out fold
ebma_fold <- survey %>%
dplyr::filter_at(dplyr::vars(dplyr::one_of(folds)),
dplyr::any_vars(. == k.folds + 1))
}
# K folds for cross-validation
cv_data <- survey %>%
dplyr::filter_at(dplyr::vars(dplyr::one_of(folds)),
dplyr::any_vars(. != k.folds + 1))
cv_folds <- cv_data %>%
dplyr::group_split(.data[[folds]])
}
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
boot_sample
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Balanced Cluster Bootstrap
# sample states weighted by number of people from state
boot_sample <- survey %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
tidyr::nest() %>%
dplyr::left_join(
y = survey %>%
dplyr::mutate(nrows = dplyr::n()) %>%
dplyr::group_by(!!rlang::sym(L2.unit)) %>%
dplyr::mutate(state_proportion =  dplyr::n() / nrows) %>%
dplyr::summarise(state_proportion = mean(state_proportion),
.groups = 'drop'), by = L2.unit) %>%
dplyr::ungroup() %>%
dplyr::slice_sample(n = nrow(.), weight_by = state_proportion,
replace = TRUE) %>%
dplyr::select(-state_proportion) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
nrow(boot_sample) > nrow(suvey)
nrow(boot_sample) > nrow(survey)
# drop observations if the bootstrap sample is too large
if (nrow(boot_sample) > nrow(survey)){
boot_sample <- dplyr::sample_n(n = nrow(survey), replace = TRUE)
}
# drop observations if the bootstrap sample is too large
if (nrow(boot_sample) > nrow(survey)){
boot_sample <- dplyr::sample_n(tbl = boot_sample, n = nrow(survey), replace = TRUE)
}
# drop observations if the bootstrap sample is too large
if (nrow(boot_sample) > nrow(survey)){
boot_sample <- dplyr::slice_sample(.data = boot_sample, n = nrow(survey), replace = TRUE)
}
library(autoMrP)
>>>>>>> Stashed changes
