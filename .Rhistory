svm.cost = svm.cost, ebma.tol = ebma.tol, seed = seed,
boot.iter = boot.iter, cores = cores)
}
class(ebma_out) <- c("autoMrP", "list")
ebma_out
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
ylabs <- plot_data$state
str(ylabs)
ylabs <- as.character(ylabs)
# plot
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
# # plot
# ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
#   ggplot2::geom_point() +
#   ggplot2::geom_text( mapping = ggplot2::aes_string(label = L2.unit), hjust = -.5) +
#   ggplot2::labs(x = "Estimate") +
#   ggplot2::theme(axis.text.y = ggplot2::element_blank(),
#                  axis.ticks.y = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
}
plot(ebma_out, algorithm = "ebma", ci.lvl = 0.95)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
ylabs <- plot_data$state
str(ylabs)
ylabs <- as.character(ylabs)
# plot
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State")# +
#ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
# # plot
# ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
#   ggplot2::geom_point() +
#   ggplot2::geom_text( mapping = ggplot2::aes_string(label = L2.unit), hjust = -.5) +
#   ggplot2::labs(x = "Estimate") +
#   ggplot2::theme(axis.text.y = ggplot2::element_blank(),
#                  axis.ticks.y = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
}
plot(ebma_out, algorithm = "ebma", ci.lvl = 0.95)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
ylabs <- plot_data$state
str(ylabs)
ylabs <- as.character(ylabs)
# plot
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
# # plot
# ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
#   ggplot2::geom_point() +
#   ggplot2::geom_text( mapping = ggplot2::aes_string(label = L2.unit), hjust = -.5) +
#   ggplot2::labs(x = "Estimate") +
#   ggplot2::theme(axis.text.y = ggplot2::element_blank(),
#                  axis.ticks.y = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
}
plot(ebma_out, algorithm = "ebma", ci.lvl = 0.95)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
ylabs <- plot_data$state
str(ylabs)
ylabs <- as.character(ylabs)
# plot
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = L2.unit, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
# # plot
# ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
#   ggplot2::geom_point() +
#   ggplot2::geom_text( mapping = ggplot2::aes_string(label = L2.unit), hjust = -.5) +
#   ggplot2::labs(x = "Estimate") +
#   ggplot2::theme(axis.text.y = ggplot2::element_blank(),
#                  axis.ticks.y = ggplot2::element_blank(),
#                  axis.title.y = ggplot2::element_blank())
}
plot(ebma_out, algorithm = "ebma", ci.lvl = 0.95)
ebma_out
x= ebma_out
algorithm = "ebma"
ci.lvl = 0.95
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
L2.unit
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
plot_data
plot_data$median == plot_data$lb
all(plot_data$median == plot_data$lb)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
# plot (with/ without error bars)
if(all(plot_data$median == plot_data$lb)){
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State")
} else{
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
}
}
plot(x= ebma_out, algorithm = "ebma", ci.lvl = 0.95)
dplyr::pull(.data = plot_data, var = L2.unit)
as.character(dplyr::pull(.data = plot_data, var = L2.unit))
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
# plot (with/ without error bars)
if(all(plot_data$median == plot_data$lb)){
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State")
} else{
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
}
}
plot(x= ebma_out, algorithm = "ebma", ci.lvl = 0.95)
ebma_out
print(ebma_out$ebma, n=48)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
# plot (with/ without error bars)
if(all(plot_data$median == plot_data$lb)){
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States")
} else{
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
}
}
plot(x= ebma_out, algorithm = "ebma", ci.lvl = 0.95)
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
}
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
# plot (with/ without error bars)
if(all(plot_data$median == plot_data$lb)){
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States")
} else{
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimate") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "State") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
}
}
plot(auto_MrP())
plot(ebma_out)
plot(ebma_out, algorithm = "MrP")
plot(ebma_out, algorithm = "MrP")
plot(ebma_out, algorithm = "Lasso")
plot(ebma_out, algorithm = "lasso")
plot(ebma_out, algorithm = "ebma")
algorithm = "lasso"
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
L2.unit
algorithm
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
plot_data
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
ylabs
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
ylabs
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
L2.unit
L2.unit
as.character(dplyr::pull(.data = plot_data, var = L2.unit))
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
plot_data
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
ylabs
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number())
plot_data
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States")
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
plot_data
plot.autoMrP <- function(x, algorithm = "ebma", ci.lvl = 0.95){
# L2.unit identifier
L2.unit <- names(x$classifiers)[1]
# plot data
if(algorithm == "ebma"){
plot_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(median = median(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, p = (1 - ci.lvl)*.5),
ub = stats::quantile(x = ebma, p = ci.lvl + (1 - ci.lvl)*.5),
.groups = "drop") %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
} else{
plot_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::select(all_of(L2.unit), contains(algorithm)) %>%
dplyr::summarise_all(.funs = list(median = ~ quantile(x = ., probs = 0.5),
lb = ~ quantile(x = ., probs = (1 - ci.lvl) *.5),
ub = ~ quantile(x = ., probs = ci.lvl + (1 - ci.lvl) *.5))) %>%
dplyr::arrange(median) %>%
dplyr::mutate(rank = dplyr::row_number()) %>%
dplyr::mutate(rank = as.factor(rank))
}
# y axis tick labels
ylabs <- as.character(dplyr::pull(.data = plot_data, var = L2.unit))
# plot (with/ without error bars)
if(all(plot_data$median == plot_data$lb)){
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States")
} else{
ggplot2::ggplot(data = plot_data, mapping = ggplot2::aes_string(x = "median", y = "rank", label = L2.unit)) +
ggplot2::geom_point() +
ggplot2::labs(x = "Estimates") +
ggplot2::scale_y_discrete(breaks = rank, labels = ylabs, name = "States") +
ggplot2::geom_errorbarh(mapping = ggplot2::aes(xmin = lb, xmax = ub))
}
}
plot(ebma_out, algorithm = "lasso")
ebma_out
plot(ebma_out, algorithm = "svm")
library(autoMrP)
library(autoMrP)
sessionInfo()
library(autoMrP)
library(autoMrP)
