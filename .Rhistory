s_data <- object %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = median )
# output table
ests <- paste(names(object)[-1], collapse = ", ")
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of classifiers: ", ests), sep = "")
output_table(object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
# summary statistics
s_data <- object %>%
dplyr::select(dplyr::one_of(L2.unit,classifiers)) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), "median")
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(L2.unit, "Estimate"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
}
# autoMrP list object
else if ( all(c("autoMrP", "list") %in% class(object)) ){
# unit identifier
L2.unit <- names(object$classifiers)[1]
# if EBMA was run
if( !"EBMA step skipped (only 1 classifier run)" %in% object$ebma ){
# Summarize EBMA or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$ebma
} else{
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
# summary statistics
s_data <- s_data %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
if( is.null(classifiers) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
} else{
cat( paste("\n", "# ", classifiers, " estimates", sep = ""))
}
output_table(
object = s_data[1:n, ],
col.names = c( L2.unit, "Min.", "Lower bound", "Median", "Upper bound", "Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(object = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
} else{
# Summarize all classifiers or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$classifiers
} else{
# check whether classifier was fitted
if( !classifiers %in% names(object$classifiers) ){
stop( classifiers, " was not fitted. Summary available for: ", paste(names(object$classifiers)[-1], collapse = ", "))
}
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
# summary statistics
s_data <- s_data %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
comparison <- s_data %>%
dplyr::select(one_of(grep(pattern = "median", x = names(s_data), value = "TRUE")[1],
grep(pattern = "lb", x = names(s_data), value = "TRUE")[1]))
if( all(comparison[,1] == comparison[,2]) ){
# summarize one classifier
if (sum(grepl(pattern = "best_subset|pca|lasso|gb|svm|mrp", x = names(s_data))) < 4){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# ", names(object$classifiers)[2]," estimates:"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of: ", paste(names(object$classifiers)[-1], collapse = ", ")), sep = "")
s_data <- s_data %>%
dplyr::select(one_of( L2.unit), contains("median"))
output_table(
object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
} else {
# drop uncertainty columns
if ( ncol(s_data) < 5 ){
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# ", names(object$classifiers)[2]," estimates:"), sep = "")
output_table(object = s_data[1:n, ], col.names = c(L2.unit, "Estimate"), format = format, digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
s_data <- s_data %>%
dplyr::select(one_of( L2.unit), contains("median"))
output_table(
object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
}
}
}
summary(boot_out, classifiers = "mrp")
summary(boot_out, classifiers = "mrp")
classifiers = "mrp"
all(c("autoMrP", "weights") %in% class(object))
all(c("autoMrP", "ensemble") %in% class(object))
all(c("autoMrP", "classifiers") %in% class(object))
all(c("autoMrP", "list") %in% class(object))
# unit identifier
L2.unit <- names(object$classifiers)[1]
L2.unit
!"EBMA step skipped (only 1 classifier run)" %in% object$ebma
# Summarize EBMA or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$ebma
} else{
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
# Summarize EBMA or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$ebma
} else{
# check whether classifier was fitted
if( !classifiers %in% names(object$classifiers) ){
stop( classifiers, " was not fitted. Summary available for: ", paste(names(object$classifiers)[-1], collapse = ", "))
}
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
summary.autoMrP <- function(object, ci.lvl = 0.95, digits = 4, format = "simple",
classifiers = NULL, n = 10, ...){
# weights
if ( all(c("autoMrP", "weights") %in% class(object)) ){
# error message if weights summary called without running multiple classifiers
if (any(object == "EBMA step skipped (only 1 classifier run)")){
stop("Weights are not reported if the EBMA step was skipped. Re-run autoMrP with multiple classifiers.")
}
# weights vector to tibble
if( is.null(dim(object)) ){
object <- dplyr::tibble(!!!object)
}
# summary statistics
s_data <- object %>%
tidyr::pivot_longer(
cols = dplyr::everything(),
names_to = "method",
values_to = "estimates") %>%
dplyr::group_by(method) %>%
dplyr::summarise(
min = base::min(estimates, na.rm = TRUE),
quart1 = stats::quantile(x = estimates, probs = 0.25, na.rm = TRUE),
median = stats::median(estimates, na.rm = TRUE),
mean = base::mean(estimates, na.rm = TRUE),
quart3 = stats::quantile(x = estimates, probs = 0.75, na.rm = TRUE),
max = base::max(estimates, na.rm = TRUE),
.groups = "drop") %>%
dplyr::arrange(dplyr::desc(median))
# weights with uncertainty
if ( all(s_data$median != s_data$min) ){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# EBMA classifier weights:"), sep = "")
# output table
output_table(
object = s_data[1:n, ],
col.names = c(
"Classifier",
"Min.",
"1st Qu.",
"Median",
"Mean",
"3rd Qu.",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, method, median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# EBMA classifier weights:"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(
"Classifier",
"Weight"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
# ensemble summary
else if ( all(c("autoMrP", "ensemble") %in% class(object)) ) {
# unit identifier
L2.unit <- names(object)[1]
# summary statistics
s_data <- object %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(
min = base::min(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = stats::quantile(x = ebma, probs = .5, na.rm = TRUE),
ub = stats::quantile(x = ebma, probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = base::max(ebma, na.rm = TRUE),
.groups = "drop"
)
# with or without uncertainty
if ( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
# output table
output_table(
object = s_data[1:n, ],
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, one_of(L2.unit), median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(L2.unit, "Estimate"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
# classifier summary
else if ( all(c("autoMrP", "classifiers") %in% class(object)) ){
# unit identifier
L2.unit <- names(object)[1]
# multiple classifiers
if (base::is.null(classifiers)){
# point estimates for all classifiers
s_data <- object %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = median )
# output table
ests <- paste(names(object)[-1], collapse = ", ")
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of classifiers: ", ests), sep = "")
output_table(object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
# summary statistics
s_data <- object %>%
dplyr::select(dplyr::one_of(L2.unit,classifiers)) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), "median")
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(L2.unit, "Estimate"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
}
# autoMrP list object
else if ( all(c("autoMrP", "list") %in% class(object)) ){
# unit identifier
L2.unit <- names(object$classifiers)[1]
# if EBMA was run
if( !"EBMA step skipped (only 1 classifier run)" %in% object$ebma ){
# Summarize EBMA or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$ebma
} else{
# check whether classifier was fitted
if( !classifiers %in% names(object$classifiers) ){
stop( classifiers, " was not fitted. Summary available for: ", paste(names(object$classifiers)[-1], collapse = ", "))
}
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
# summary statistics
s_data <- s_data %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
if( is.null(classifiers) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
} else{
cat( paste("\n", "# ", classifiers, " estimates", sep = ""))
}
output_table(
object = s_data[1:n, ],
col.names = c( L2.unit, "Min.", "Lower bound", "Median", "Upper bound", "Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(object = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
} else{
# Summarize all classifiers or classifier specified in classifiers argument
if( is.null(classifiers)) {
s_data <- object$classifiers
} else{
s_data <- object$classifiers %>%
dplyr::select( one_of(L2.unit, classifiers) )
}
# summary statistics
s_data <- s_data %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5, na.rm = TRUE),
median = ~ stats::median(x = ., na.rm = TRUE),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5, na.rm = TRUE),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
comparison <- s_data %>%
dplyr::select(one_of(grep(pattern = "median", x = names(s_data), value = "TRUE")[1],
grep(pattern = "lb", x = names(s_data), value = "TRUE")[1]))
if( all(comparison[,1] == comparison[,2]) ){
# summarize one classifier
if (sum(grepl(pattern = "best_subset|pca|lasso|gb|svm|mrp", x = names(s_data))) < 4){
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# ", names(object$classifiers)[2]," estimates:"), sep = "")
output_table(
object = s_data[1:n, ],
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# estimates of: ", paste(names(object$classifiers)[-1], collapse = ", ")), sep = "")
s_data <- s_data %>%
dplyr::select(one_of( L2.unit), contains("median"))
output_table(
object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
} else {
# drop uncertainty columns
if ( ncol(s_data) < 5 ){
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
cat( paste("\n", "# ", names(object$classifiers)[2]," estimates:"), sep = "")
output_table(object = s_data[1:n, ], col.names = c(L2.unit, "Estimate"), format = format, digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
} else{
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
s_data <- s_data %>%
dplyr::select(one_of( L2.unit), contains("median"))
output_table(
object = s_data[1:n, ],
col.names = names(s_data),
format = format,
digits = digits)
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
}
}
}
}
}
summary(boot_out, classifiers = "svm")
summary(boot_out, classifiers = "Deine Mudda")
test <- boot_out$classifiers %>%
dplyr::filter(state == "CA")
test
plot(density(test$best_subset))
plot(density(test$lasso))
plot(density(test$pca))
plot(density(test$gb))
plot(density(test$svm))
plot(denisty(test$gb))
plot(density(test$svm))
plot(density(test$gb))
plot(density(test$svm))
plot(density(test$gb))
plot(density(test$svm))
plot(density(test$gb))
plot(density(test$svm))
plot(density(test$gb))
library(autoMrP)
?auto_MrP
vignette(package = "autoMrP")
devtools::build_vignettes()
