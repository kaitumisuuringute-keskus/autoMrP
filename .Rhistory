census = absentee_census,
best.subset = FALSE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = TRUE,
#gb.L2.unit = FALSE,
#gb.L2.reg = TRUE,
svm.L2.unit = FALSE,
svm.L2.reg = TRUE,
cores = max_cores,
uncertainty = TRUE,
boot.iter = 2)
max_cores <- parallel::detectCores()
out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = absentee_voting,
census = absentee_census,
best.subset = FALSE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = TRUE,
#gb.L2.unit = FALSE,
#gb.L2.reg = TRUE,
svm.L2.unit = FALSE,
svm.L2.reg = TRUE,
cores = max_cores,
uncertainty = TRUE,
boot.iter = 2)
out
library(autoMrP)
rm(list=ls())
devtools
devtools::install_github("retowuest/autoMrP")
install.packages("dplyr")
rm(list=ls())
library(autoMrP)
max_cores <- parallel::detectCores()
start2 <- Sys.time()
out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = absentee_voting,
census = absentee_census,
best.subset = FALSE,
lasso = TRUE,
pca = TRUE,
gb = FALSE,
svm = TRUE,
#gb.L2.unit = FALSE,
#gb.L2.reg = TRUE,
svm.L2.unit = FALSE,
svm.L2.reg = TRUE,
cores = max_cores,
uncertainty = TRUE,
boot.iter = 2)
end2 <- Sys.time()
out
max_cores <- parallel::detectCores()
start2 <- Sys.time()
out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = absentee_voting,
census = absentee_census,
best.subset = TRUE,
lasso = TRUE,
pca = TRUE,
gb = TRUE,
svm = TRUE,
gb.L2.unit = FALSE,
gb.L2.reg = TRUE,
svm.L2.unit = FALSE,
svm.L2.reg = TRUE,
cores = max_cores,
uncertainty = TRUE,
boot.iter = 2)
end2 <- Sys.time()
out
max_cores <- parallel::detectCores()
max_cores
start2 <- Sys.time()
out <- auto_MrP(
y = "YES",
L1.x = c("L1x1", "L1x2", "L1x3"),
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6"),
L2.unit = "state",
L2.reg = "region",
bin.proportion = "proportion",
survey = absentee_voting,
census = absentee_census,
best.subset = TRUE,
lasso = TRUE,
pca = TRUE,
gb = TRUE,
svm = TRUE,
gb.L2.unit = FALSE,
gb.L2.reg = TRUE,
svm.L2.unit = FALSE,
svm.L2.reg = TRUE,
cores = max_cores,
uncertainty = TRUE)
end2 <- Sys.time()
difftime(time1 = end1, time2 = start1, "mins")
difftime(time1 = end2, time2 = start2, "mins")
out
# save
getwd()
# save
save(out, file = "../../../Dropbox/MRP and ML/jss-test-philipp/bootstrapping output.RData")
out$ebma
library(autoMrP)
sessionInfo()
devtools::build_win()
devtools::use_travis()
devtools::revdep()
install.packages("rhub")
rhub::check_on_macos()
rhub::check_on_macos(path = ./)
rhub::check_on_macos(path = "./")
getwd()
rhub::check_on_macos(path = "C:/Users/Philipp/Documents/github/autoMrP/")
rhub::list_validated_emails("philippbroniecki@gmail.com")
rhub::list_validated_emails(x = "philippbroniecki@gmail.com")
?rhub::validate_email
rhub::validate_email("philippbroniecki@gmail.com")
rhub::check_for_cran()
?rhub::check_for_cran()
rhub::check_for_cran(path = "C:/Users/Philipp/Documents/github/autoMrP/", email = "philippbroniecki@gmail.com")
rhub::check_for_cran(path = "C:/Users/Philipp/Documents/github/autoMrP/", email = "philippbroniecki@gmail.com")
rhub::check_for_cran(path = "C:/Users/Philipp/Documents/github/autoMrP/", email = "philippbroniecki@gmail.com")
rhub::check_for_cran(path = "C:/Users/Philipp/Documents/github/autoMrP/", email = "philippbroniecki@gmail.com")
rm(list=ls())
survey <- survey_item
devtools::load_all()
# arguments
seed <- NULL
y = "YES"
L1.x = c("L1x1", "L1x2", "L1x3")
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6")
#L2.x = c("L2.x1", "L2.x2")
mrp.L2.x = NULL
L2.unit = "state"
L2.reg = "region"
L2.x.scale = FALSE
pcs = NULL
folds = NULL
bin.proportion = "proportion"
bin.size = NULL
survey = taxation_survey
survey = autoMrp::taxation_survey
survey = autoMrP::taxation_survey
taxation_survey
install.packages("doRNG")
library(autoMrP)
# arguments
seed <- NULL
y = "YES"
L1.x = c("L1x1", "L1x2", "L1x3")
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6")
#L2.x = c("L2.x1", "L2.x2")
mrp.L2.x = NULL
L2.unit = "state"
L2.reg = "region"
L2.x.scale = FALSE
pcs = NULL
folds = NULL
bin.proportion = "proportion"
bin.size = NULL
survey = autoMrP::taxation_survey
survey = autoMrP::taxes_survey
census = autoMrP::taxes_census
ebma.size = 1/3
k.folds = 5
cv.sampling = "L2 units"
loss.unit = "individuals"
loss.fun = "MSE"
# switch for classifiers
best.subset = TRUE
lasso = TRUE
gb = TRUE
svm = TRUE
# the standard MRP model
mrp = FALSE
forward.select = FALSE
best.subset.L2.x = NULL
lasso.L2.x = NULL
pca.L2.x = NULL
gb.L2.x = NULL
svm.L2.x = NULL
# Standard MrP model L2 variables
gb.L2.unit = FALSE
gb.L2.reg = FALSE
# tuning params lasso
lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda
# tuning params lasso
#lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda = seq(from = 0, to = 100, length.out = 15)
lasso.lambda
lasso.n.iter = 70
# tuning params boosting
gb.interaction.depth = c(1, 2, 3)
gb.shrinkage = c(0.04, 0.01, 0.008, 0.005, 0.001)
gb.n.trees.init = 1
gb.n.trees.increase = 50
gb.n.trees.max = 1000
gb.n.iter = 70
gb.n.minobsinnode = 5
svm.kernel = "radial"
svm.loss.fun = NULL
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4)
svm.cost = c(1, 10)
ebma.n.draws = 1
ebma.tol = c(0.01, 0.005) # 0.001, 0.0005, 0.0001, 0.00005, 0.00001)
uncertainty = TRUE
boot.iter <- 12
seed = NULL
verbose = TRUE
cores = 6
svm.L2.reg = TRUE
svm.L2.unit = FALSE
# Call to function doing the error checks
error_checks(y = y,
L1.x = L1.x,
L2.x = L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L2.x.scale = L2.x.scale,
pcs = pcs,
folds = folds,
bin.proportion = bin.proportion,
bin.size = bin.size,
survey = survey,
census = census,
ebma.size = ebma.size,
k.folds = k.folds,
cv.sampling = cv.sampling,
loss.unit = loss.unit,
loss.fun = loss.fun,
best.subset = best.subset,
lasso = lasso,
pca = pca,
gb = gb,
svm = svm,
mrp = mrp,
forward.select = forward.select,
best.subset.L2.x = best.subset.L2.x,
lasso.L2.x = lasso.L2.x,
gb.L2.x = gb.L2.x,
svm.L2.x = svm.L2.x,
mrp.L2.x = mrp.L2.x,
gb.L2.unit = gb.L2.unit,
gb.L2.reg = gb.L2.reg,
lasso.lambda = lasso.lambda,
lasso.n.iter = lasso.n.iter,
uncertainty = uncertainty,
boot.iter = boot.iter,
seed = seed)
devtools::load_all()
# Call to function doing the error checks
error_checks(y = y,
L1.x = L1.x,
L2.x = L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L2.x.scale = L2.x.scale,
pcs = pcs,
folds = folds,
bin.proportion = bin.proportion,
bin.size = bin.size,
survey = survey,
census = census,
ebma.size = ebma.size,
k.folds = k.folds,
cv.sampling = cv.sampling,
loss.unit = loss.unit,
loss.fun = loss.fun,
best.subset = best.subset,
lasso = lasso,
pca = pca,
gb = gb,
svm = svm,
mrp = mrp,
forward.select = forward.select,
best.subset.L2.x = best.subset.L2.x,
lasso.L2.x = lasso.L2.x,
gb.L2.x = gb.L2.x,
svm.L2.x = svm.L2.x,
mrp.L2.x = mrp.L2.x,
gb.L2.unit = gb.L2.unit,
gb.L2.reg = gb.L2.reg,
lasso.lambda = lasso.lambda,
lasso.n.iter = lasso.n.iter,
uncertainty = uncertainty,
boot.iter = boot.iter,
seed = seed)
pca = TRUE
# Call to function doing the error checks
error_checks(y = y,
L1.x = L1.x,
L2.x = L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L2.x.scale = L2.x.scale,
pcs = pcs,
folds = folds,
bin.proportion = bin.proportion,
bin.size = bin.size,
survey = survey,
census = census,
ebma.size = ebma.size,
k.folds = k.folds,
cv.sampling = cv.sampling,
loss.unit = loss.unit,
loss.fun = loss.fun,
best.subset = best.subset,
lasso = lasso,
pca = pca,
gb = gb,
svm = svm,
mrp = mrp,
forward.select = forward.select,
best.subset.L2.x = best.subset.L2.x,
lasso.L2.x = lasso.L2.x,
gb.L2.x = gb.L2.x,
svm.L2.x = svm.L2.x,
mrp.L2.x = mrp.L2.x,
gb.L2.unit = gb.L2.unit,
gb.L2.reg = gb.L2.reg,
lasso.lambda = lasso.lambda,
lasso.n.iter = lasso.n.iter,
uncertainty = uncertainty,
boot.iter = boot.iter,
seed = seed)
# Check seed argument and set seed
if (is.null(seed)) { seed <- 546213978 }
set.seed(seed)
seed
!uncertainty
is.null(boot.iter)
survey
pcs
folds
bin.proportion
bin.size
survey
survey
census
ebma.size
k.folds
cv.sampling
loss.fun
idx_boot <- NULL
idx_boot
# Bootstrapped survey sample
boot_sample <- dplyr::sample_n(tbl = survey, size = nrow(survey), replace = TRUE)
boot_sample
# testing
runif(1, 0, 48)
# testing
as.ineger(runif(1, 0, 48))
# testing
as.ineger(runif(1, 0, 48))
# testing
as.integer(runif(1, 0, 48))
# testing
as.integer(runif(1, 0, 48))
# testing
as.integer(runif(1, 0, 48))
# testing
as.integer(runif(1, 0, 48))
# testing
as.integer(runif(1, 0, 48))
# testing
boot_sample$L2.unit == as.integer(runif(1, 0, 48))
# Bootstrap iterations
boot_out <- foreach::foreach(idx_boot = 1:boot.iter, .packages = "autoMrP") %dorng% {
# Bootstrapped survey sample
boot_sample <- dplyr::sample_n(tbl = survey, size = nrow(survey), replace = TRUE)
# Estimate on 1 sample in autoMrP
boot_mrp <- auto_MrP(
survey = boot_sample,
ebma.n.draws = 1,
uncertainty = FALSE,
verbose = FALSE,
cores = 1,
y = y,
L1.x = L1.x,
L2.x = L2.x,
mrp.L2.x = mrp.L2.x,
L2.unit = L2.unit,
L2.reg = L2.reg,
L2.x.scale = L2.x.scale,
pcs = pcs,
folds = folds,
bin.proportion = bin.proportion,
bin.size = bin.size,
census = census,
ebma.size = ebma.size,
k.folds = k.folds,
cv.sampling = cv.sampling,
loss.unit = loss.unit,
loss.fun = loss.fun,
best.subset = best.subset,
lasso = lasso,
pca = pca,
gb = gb,
svm = svm,
mrp = mrp,
forward.select = forward.select,
best.subset.L2.x = best.subset.L2.x,
lasso.L2.x = lasso.L2.x,
pca.L2.x = pca.L2.x,
gb.L2.x = gb.L2.x,
svm.L2.x = svm.L2.x,
gb.L2.unit = gb.L2.unit,
gb.L2.reg = gb.L2.reg,
lasso.lambda = lasso.lambda,
lasso.n.iter = lasso.n.iter,
gb.interaction.depth = gb.interaction.depth,
gb.shrinkage = gb.shrinkage,
gb.n.trees.init = gb.n.trees.init,
gb.n.trees.increase = gb.n.trees.increase,
gb.n.trees.max = gb.n.trees.max,
gb.n.iter = gb.n.iter,
gb.n.minobsinnode = gb.n.minobsinnode,
svm.kernel = svm.kernel,
svm.gamma = svm.gamma,
svm.cost = svm.cost,
ebma.tol = ebma.tol,
seed = seed,
boot.iter = NULL
)
}
boot_mrp
boot_mrp
boot_out
# Median and standard deviations for classifier estimates
classifiers <- do.call(rbind, do.call(rbind, boot_out)[,"classifiers"] ) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = c(median = median, sd = sd), na.rm = TRUE) %>%
dplyr::select(
state,
contains("best_subset"),
contains("pca"),
contains("lasso"),
contains("gb"),
contains("svm"),
contains("mrp")
)
classifiers
state
boot_out
boot_out[[12]]
boot_out[[12]]$classifiers$svm[2] <- NA
boot_out[[12]]
# Median and standard deviations for classifier estimates
classifiers <- do.call(rbind, do.call(rbind, boot_out)[,"classifiers"] ) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = c(median = median, sd = sd), na.rm = TRUE) %>%
dplyr::select(
state,
contains("best_subset"),
contains("pca"),
contains("lasso"),
contains("gb"),
contains("svm"),
contains("mrp")
)
classifiers
boot_out[[13]]$classifiers$
boot_out[[13]]$classifiers
boot_out[[13]]$classifiers
boot_out[[13]]$classifiers
boot_out[[11]]$classifiers
boot_out[[11]]$classifiers <- dplyr::filter(boot_out[[11]]$classifiers, state != "AL")
boot_out[[11]]$classifiers
# Median and standard deviations for classifier estimates
classifiers <- do.call(rbind, do.call(rbind, boot_out)[,"classifiers"] ) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = c(median = median, sd = sd), na.rm = TRUE) %>%
dplyr::select(
state,
contains("best_subset"),
contains("pca"),
contains("lasso"),
contains("gb"),
contains("svm"),
contains("mrp")
)
classifiers
library(foreach)
registerDoSEQ()
foreach(j=1:3, .errorhandling="pass") %dopar%
{
if(j==2) j + undefined_variable else j
}
