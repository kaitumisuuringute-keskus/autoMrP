if ( all(c("autoMrP", "weights") %in% class(x)) ){
# summary statistics
s_data <- x %>%
tidyr::pivot_longer(
cols = dplyr::everything(),
names_to = "method",
values_to = "estimates"
) %>%
dplyr::group_by(method) %>%
dplyr::summarise(
min = base::min(estimates, na.rm = TRUE),
quart1 = stats::quantile(x = estimates, probs = 0.25),
median = stats::median(estimates),
mean = base::mean(estimates),
quart3 = stats::quantile(x = estimates, probs = 0.75),
max = base::max(estimates),
.groups = "drop") %>%
dplyr::arrange(dplyr::desc(median))
# weights with uncertainty
if ( all(s_data$median != s_data$min) ){
cat( paste("\n", "# EBMA classifier weights:"), sep = "")
# output table
output_table(
x = s_data,
col.names = c(
"Classifier",
"Min.",
"1st Qu.",
"Median",
"Mean",
"3rd Qu.",
"Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, method, median)
cat( paste("\n", "# EBMA classifier weights:"), sep = "")
output_table(
x = s_data,
col.names = c(
"Classifier",
"Weight"),
format = format,
digits = digits)
}
}
# ensemble summary
else if ( all(c("autoMrP", "ensemble") %in% class(x)) ) {
# unit identifier
L2.unit <- names(x)[1]
# summary statistics
s_data <- x %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise(
min = base::min(ebma, na.rm = TRUE),
lb = stats::quantile(x = ebma, probs = (1 - ci.lvl)*.5 ),
median = stats::quantile(x = ebma, probs = .5 ),
ub = stats::quantile(x = ebma, probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = base::max(ebma, na.rm = TRUE),
.groups = "drop"
)
# with or without uncertainty
if ( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
# output table
output_table(
x = s_data,
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(
x = s_data,
col.names = c(L2.unit, "Estimates"),
format = format,
digits = digits)
}
}
# classifier summary
else if ( all(c("autoMrP", "classifiers") %in% class(x)) ){
# unit identifier
L2.unit <- names(x)[1]
# multiple classifiers
if (base::is.null(classifiers)){
# point estimates for all classifiers
s_data <- x %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = median )
# output table
ests <- paste(names(x)[-1], collapse = ", ")
cat( paste("\n", "# estimates of classifiers: ", ests), sep = "")
output_table(x = s_data,
col.names = names(s_data),
format = format,
digits = digits)
} else{
# summary statistics
s_data <- x %>%
dplyr::select(dplyr::one_of(L2.unit,classifiers)) %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
x = s_data,
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), "median")
cat( paste("\n", "# estimates of", classifiers, "classifier"), sep = "")
output_table(
x = s_data,
col.names = c(L2.unit, "Estimates"),
format = format,
digits = digits)
}
}
}
# autoMrP list object
else if ( all(c("autoMrP", "list") %in% class(x))  ){
# unit identifier
L2.unit <- names(x$classifiers)[1]
# if EBMA was run
if( all(x$ebma != "EBMA step skipped (only 1 classifier run)") ){
# summary statistics
s_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(
x = s_data,
col.names = c( L2.unit, "Min.", "Lower bound", "Median", "Upper bound", "Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(x = s_data, col.names = c(L2.unit, "Median"), format = format, digits = digits)
}
} else{
# summary statistics
s_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if ( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# ", names(x$classifiers)[2]," estimates:"), sep = "")
output_table(
x = s_data,
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# ", names(x$classifiers)[2]," estimates:"), sep = "")
output_table(x = s_data, col.names = c(L2.unit, "Median"), format = format, digits = digits)
}
}
}
}
summary(ebma_out)
ebma_out
summary(ebma_out)
print("EBMA esitmates")
print("EBMA esitmates", quote = FALSE)
message("EBMA esitmates", quote = FALSE)
message("EBMA esitmates")
?message
message()
message()
message
simpleMessage
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(
x = s_data,
col.names = c( L2.unit, "Min.", "Lower bound", "Median", "Upper bound", "Max"),
format = format,
digits = digits)
ebma_out
install.packages("knitr")
library(autoMrP)
library(autoMrP)
rm(list=ls())
shing <- function(){
test <- autoMrP::auto_MrP(
cores = 6,
y = "YES",
L1.x = c("L1x1", "L1x2"),
L2.x = c("L2.x1", "L2.x2"),
mrp.L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
L2.reg = "region",
L2.x.scale = FALSE,
survey = autoMrP::survey_item,
census = autoMrP::census,
bin.proportion = "proportion",
best.subset = TRUE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = FALSE,
mrp = TRUE,
ebma.tol = c(0.001),#, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001),
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
svm.cost = c(0.1, 0.5, 1, 5, 10, 20, 50, 100),
#svm.L2.unit = FALSE,
#svm.L2.reg = TRUE,
ebma.n.draws = 1,
#gb.L2.reg = TRUE,
lasso.n.iter = 70)
return(test$ebma$ebma)
}
test <- autoMrP::auto_MrP(
cores = 6,
y = "YES",
L1.x = c("L1x1", "L1x2"),
L2.x = c("L2.x1", "L2.x2"),
mrp.L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
L2.reg = "region",
L2.x.scale = FALSE,
survey = autoMrP::survey_item,
census = autoMrP::census,
bin.proportion = "proportion",
best.subset = TRUE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = FALSE,
mrp = TRUE,
ebma.tol = c(0.001),#, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001),
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
svm.cost = c(0.1, 0.5, 1, 5, 10, 20, 50, 100),
#svm.L2.unit = FALSE,
#svm.L2.reg = TRUE,
ebma.n.draws = 1,
#gb.L2.reg = TRUE,
lasso.n.iter = 70)
test <- auto_MrP(
cores = 6,
y = "YES",
L1.x = c("L1x1", "L1x2"),
L2.x = c("L2.x1", "L2.x2"),
mrp.L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
L2.reg = "region",
L2.x.scale = FALSE,
survey = autoMrP::survey_item,
census = autoMrP::census,
bin.proportion = "proportion",
best.subset = TRUE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = FALSE,
mrp = TRUE,
ebma.tol = c(0.001),#, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001),
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
svm.cost = c(0.1, 0.5, 1, 5, 10, 20, 50, 100),
#svm.L2.unit = FALSE,
#svm.L2.reg = TRUE,
ebma.n.draws = 1,
#gb.L2.reg = TRUE,
lasso.n.iter = 70)
# load all package functions
devtools::load_all()
test <- auto_MrP(
cores = 6,
y = "YES",
L1.x = c("L1x1", "L1x2"),
L2.x = c("L2.x1", "L2.x2"),
mrp.L2.x = c("L2.x1", "L2.x2"),
L2.unit = "state",
L2.reg = "region",
L2.x.scale = FALSE,
survey = autoMrP::survey_item,
census = autoMrP::census,
bin.proportion = "proportion",
best.subset = TRUE,
lasso = FALSE,
pca = TRUE,
gb = FALSE,
svm = FALSE,
mrp = TRUE,
ebma.tol = c(0.001),#, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001),
svm.gamma = c(0.3, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
svm.cost = c(0.1, 0.5, 1, 5, 10, 20, 50, 100),
#svm.L2.unit = FALSE,
#svm.L2.reg = TRUE,
ebma.n.draws = 1,
#gb.L2.reg = TRUE,
lasso.n.iter = 70)
summary(test)
test
test
summary.autoMrP(test)
summary.autoMrP(test)
library(autoMrP)
summary(test)
library(autoMrP)
summary(test)
class(test)
summary.autoMrP(test)
summary(test)
summary(test)
x <- test
test
all(c("autoMrP", "list") %in% class(x))
# unit identifier
L2.unit <- names(x$classifiers)[1]
# summary statistics
s_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
all(x$ebma != "EBMA step skipped (only 1 classifier run)")
x
x$ebma
x$ebma %>%
dplyr::group_by(.dots = list(L2.unit))
x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# unit identifier
L2.unit <- names(x$classifiers)[1]
# if EBMA was run
if( all(x$ebma != "EBMA step skipped (only 1 classifier run)") ){
# summary statistics
s_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(
x = s_data,
col.names = c( L2.unit, "Min.", "Lower bound", "Median", "Upper bound", "Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(x = s_data, col.names = c(L2.unit, "Median"), format = format, digits = digits)
}
} else{
# summary statistics
s_data <- x$classifiers %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
# with or without uncertainty
if ( all(s_data$median != s_data$lb) ){
cat( paste("\n", "# ", names(x$classifiers)[2]," estimates:"), sep = "")
output_table(
x = s_data,
col.names = c(
L2.unit,
"Min.",
"Lower bound",
"Median",
"Upper bound",
"Max"),
format = format,
digits = digits)
} else{
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# ", names(x$classifiers)[2]," estimates:"), sep = "")
output_table(x = s_data, col.names = c(L2.unit, "Median"), format = format, digits = digits)
}
}
x$ebma
# summary statistics
s_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
ci.lvl = 0.95
# summary statistics
s_data <- x$ebma %>%
dplyr::group_by(.dots = list(L2.unit)) %>%
dplyr::summarise_all(.funs = list(
min = ~ base::min(x = ., na.rm = TRUE),
lb = ~ stats::quantile(x = ., probs = (1 - ci.lvl)*.5 ),
median = ~ stats::median(x = ., na.rm = TRUE ),
ub = ~ stats::quantile(x = ., probs = ci.lvl + (1 - ci.lvl)*.5 ),
max = ~ base::max(x = ., na.rm = TRUE)
))
s_data
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
s_data
cat( paste("\n", "# EBMA estimates:"), sep = "")
n=10
nrow(d_data)-n
nrow(s_data)-n
cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(x = s_data[n,], col.names = c(L2.unit, "Median"), format = format, digits = digits)
n
s_data[n,]
output_table(x = s_data[1:n,], col.names = c(L2.unit, "Median"), format = format, digits = digits)
s_data[1:n,]
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
x
print( knitr::kable(x = s_data[1:n,],
col.names = col.names,
format = format,
digits = digits))
print( knitr::kable(x = s_data,
col.names = col.names,
format = format,
digits = digits))
digits
format
format = "rst"
digits = "4"
print( knitr::kable(x = s_data,
col.names = col.names,
format = format,
digits = digits))
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
digits
digits = 4
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
s_data <- dplyr::select(.data = s_data, dplyr::one_of(L2.unit), median)
cat( paste("\n", "# EBMA estimates:"), sep = "")
output_table(x = s_data[1:n, ], col.names = c(L2.unit, "Median"), format = format, digits = digits)
cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
n <- ifelse(n <= nrow(s_data), yes = n, no = nrow(s_data) )
n
if (n < nrow(s_data)) cat( paste("... with", nrow(s_data)-n, " more rows"), sep = "")
library(autoMrP)
library(autoMrP)
?summary
library(autoMrP)
library(autoMrP)
library(autoMrP)
library(autoMrP)
